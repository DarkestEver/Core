"use strict";

/*
 * Copyright (C) MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Nikolay Beketov, 12 2019
 *
 */

/* global globalRootUrl, PbxApi, globalTranslate, UserMessage, extensionModules */

/**
 * Мониторинг статуса обновления или установки модуля
 *
 */
var upgradeStatusLoopWorker = {
  timeOut: 1000,
  timeOutHandle: '',
  moduleUniqid: '',
  iterations: 0,
  oldPercent: 0,
  needEnableAfterInstall: false,
  initialize: function () {
    function initialize(uniqid, needEnable) {
      upgradeStatusLoopWorker.moduleUniqid = uniqid;
      upgradeStatusLoopWorker.iterations = 0;
      upgradeStatusLoopWorker.needEnableAfterInstall = needEnable;
      upgradeStatusLoopWorker.restartWorker();
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      upgradeStatusLoopWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      PbxApi.SystemModuleDownloadStatus(upgradeStatusLoopWorker.moduleUniqid, upgradeStatusLoopWorker.cbRefreshModuleStatus, upgradeStatusLoopWorker.restartWorker);
    }

    return worker;
  }(),
  cbRefreshModuleStatus: function () {
    function cbRefreshModuleStatus(response) {
      upgradeStatusLoopWorker.iterations += 1;
      upgradeStatusLoopWorker.timeoutHandle = window.setTimeout(upgradeStatusLoopWorker.worker, upgradeStatusLoopWorker.timeOut); // Check download status

      if (response === false && upgradeStatusLoopWorker.iterations < 50) {
        window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      } else if (upgradeStatusLoopWorker.iterations > 50 || response.d_status === 'DOWNLOAD_ERROR' || response.d_status === 'NOT_FOUND') {
        window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
        var errorMessage = response.d_error !== undefined ? response.d_error : '';
        errorMessage = errorMessage.replace(/\n/g, '<br>');
        UserMessage.showError(errorMessage, globalTranslate.ext_UpdateModuleError);
        $("#".concat(upgradeStatusLoopWorker.moduleUniqid)).find('i').removeClass('loading');
        $('.new-module-row').find('i').addClass('download').removeClass('redo');
        $('a.button').removeClass('disabled');
      } else if (response.d_status === 'DOWNLOAD_IN_PROGRESS') {
        if (upgradeStatusLoopWorker.oldPercent !== response.d_status_progress) {
          upgradeStatusLoopWorker.iterations = 0;
        }

        $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
        upgradeStatusLoopWorker.oldPercent = response.d_status_progress;
      } else if (response.d_status === 'DOWNLOAD_COMPLETE') {
        PbxApi.SystemInstallModule(response.filePath, upgradeStatusLoopWorker.cbAfterModuleInstall);
        window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      }
    }

    return cbRefreshModuleStatus;
  }(),
  cbAfterModuleInstall: function () {
    function cbAfterModuleInstall(response) {
      if (response.length === 0 || response === false) {
        UserMessage.showError(globalTranslate.ext_InstallationError);
      } else {
        // Check installation status
        $('a.button').removeClass('disabled');

        if (upgradeStatusLoopWorker.needEnableAfterInstall) {
          PbxApi.SystemEnableModule(upgradeStatusLoopWorker.moduleUniqid, function () {
            extensionModules.reloadModuleAndPage(upgradeStatusLoopWorker.moduleUniqid);
          });
        } else {
          window.location = "".concat(globalRootUrl, "pbx-extension-modules/index/");
        }
      }
    }

    return cbAfterModuleInstall;
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,