{"version":3,"sources":["../../src/Update/update-api.js"],"names":["UpdateApi","pbxPing","Config","updateUrl","pbxReloadAllModulesUrl","pbxUrl","pbxReloadDialplanUrl","getModulesUpdates","cbSuccess","requestData","TYPE","LICENSE","globalPBXLicense","PBXVER","globalPBXVersion","LANGUAGE","globalPBXLanguage","$","api","url","on","method","data","successTest","response","undefined","Object","keys","length","result","toUpperCase","onSuccess","GetModuleInstallLink","params","cbFailure","RELEASEID","releaseId","onFailure","tryParseJSON","jsonString","o","JSON","parse","e"],"mappings":";;;;AAAA;;;;;;;;AAQA;AAEA,IAAMA,SAAS,GAAG;AACjBC,EAAAA,OAAO,YAAKC,MAAM,CAACC,SAAZ,6BADU;AAEjBC,EAAAA,sBAAsB,YAAKF,MAAM,CAACG,MAAZ,wCAFL;AAE8D;AAC/EC,EAAAA,oBAAoB,YAAKJ,MAAM,CAACG,MAAZ,qCAHH;AAGyD;;AAG1E;;;;AAIAE,EAAAA,iBAViB;AAAA,+BAUCC,SAVD,EAUY;AAC5B,UAAMC,WAAW,GAAG;AACnBC,QAAAA,IAAI,EAAE,SADa;AAEnBC,QAAAA,OAAO,EAAEC,gBAFU;AAGnBC,QAAAA,MAAM,EAAEC,gBAHW;AAInBC,QAAAA,QAAQ,EAAEC;AAJS,OAApB;AAMAC,MAAAA,CAAC,CAACC,GAAF,CAAM;AACLC,QAAAA,GAAG,EAAEjB,MAAM,CAACC,SADP;AAELiB,QAAAA,EAAE,EAAE,KAFC;AAGLC,QAAAA,MAAM,EAAE,MAHH;AAILC,QAAAA,IAAI,EAAEb,WAJD;AAKLc,QAAAA,WALK;AAAA,+BAKOC,QALP,EAKiB;AACrB;AACA,mBAAOA,QAAQ,KAAKC,SAAb,IACHC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,GAA+B,CAD5B,IAEHJ,QAAQ,CAACK,MAAT,CAAgBC,WAAhB,OAAkC,SAFtC;AAGA;;AAVI;AAAA;AAWLC,QAAAA,SAAS,EAAEvB;AAXN,OAAN;AAaA;;AA9BgB;AAAA;AAgCjBwB,EAAAA,oBAhCiB;AAAA,kCAgCIC,MAhCJ,EAgCYzB,SAhCZ,EAgCuB0B,SAhCvB,EAgCkC;AAClD,UAAMzB,WAAW,GAAG;AACnBC,QAAAA,IAAI,EAAE,eADa;AAEnBC,QAAAA,OAAO,EAAEC,gBAFU;AAGnBuB,QAAAA,SAAS,EAAEF,MAAM,CAACG;AAHC,OAApB;AAKAnB,MAAAA,CAAC,CAACC,GAAF,CAAM;AACLC,QAAAA,GAAG,EAAEjB,MAAM,CAACC,SADP;AAELiB,QAAAA,EAAE,EAAE,KAFC;AAGLC,QAAAA,MAAM,EAAE,MAHH;AAILC,QAAAA,IAAI,EAAEb,WAJD;AAKLc,QAAAA,WALK;AAAA,+BAKOC,QALP,EAKiB;AACrB;AACA,mBAAOA,QAAQ,KAAKC,SAAb,IACHC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,GAA+B,CAD5B,IAEHJ,QAAQ,CAACK,MAAT,CAAgBC,WAAhB,OAAkC,SAFtC;AAGA;;AAVI;AAAA;AAWLC,QAAAA,SAXK;AAAA,6BAWKP,QAXL,EAWe;AACnBhB,YAAAA,SAAS,CAACyB,MAAD,EAAST,QAAT,CAAT;AACA;;AAbI;AAAA;AAcLa,QAAAA,SAdK;AAAA,+BAcO;AACXH,YAAAA,SAAS,CAACD,MAAD,CAAT;AACA;;AAhBI;AAAA;AAAA,OAAN;AAkBA;;AAxDgB;AAAA;;AAyDjB;;;;;AAKAK,EAAAA,YA9DiB;AAAA,0BA8DJC,UA9DI,EA8DQ;AACxB,UAAI;AACH,YAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAV,CADG,CAGH;AACA;AACA;AACA;;AACA,YAAIC,CAAC,IAAI,QAAOA,CAAP,MAAa,QAAtB,EAAgC;AAC/B,iBAAOA,CAAP;AACA;AACD,OAVD,CAUE,OAAOG,CAAP,EAAU,CACX;AACA;;AACD,aAAO,KAAP;AACA;;AA7EgB;AAAA;AAAA,CAAlB","sourcesContent":["/*\n * Copyright (C) MIKO LLC - All Rights Reserved\n * Unauthorized copying of this file, via any medium is strictly prohibited\n * Proprietary and confidential\n * Written by Nikolay Beketov, 8 2019\n *\n */\n\n/* global Config, globalPBXLanguage, globalPBXLicense, globalPBXVersion */\n\nconst UpdateApi = {\n\tpbxPing: `${Config.updateUrl}/pbxcore/api/system/ping`,\n\tpbxReloadAllModulesUrl: `${Config.pbxUrl}/pbxcore/api/pbx/reload_all_modules`, // Рестарт всех модулей АТС\n\tpbxReloadDialplanUrl: `${Config.pbxUrl}/pbxcore/api/pbx/reload_dialplan`, // Запуск генератора dialplan, перезапуск dialplan на АТС.\n\n\n\t/**\n\t * Запрашивает на сайте новые версии модулей PBX\n\t * @returns {boolean}\n\t */\n\tgetModulesUpdates(cbSuccess) {\n\t\tconst requestData = {\n\t\t\tTYPE: 'MODULES',\n\t\t\tLICENSE: globalPBXLicense,\n\t\t\tPBXVER: globalPBXVersion,\n\t\t\tLANGUAGE: globalPBXLanguage,\n\t\t};\n\t\t$.api({\n\t\t\turl: Config.updateUrl,\n\t\t\ton: 'now',\n\t\t\tmethod: 'POST',\n\t\t\tdata: requestData,\n\t\t\tsuccessTest(response) {\n\t\t\t\t// test whether a JSON response is valid\n\t\t\t\treturn response !== undefined\n\t\t\t\t\t&& Object.keys(response).length > 0\n\t\t\t\t\t&& response.result.toUpperCase() === 'SUCCESS';\n\t\t\t},\n\t\t\tonSuccess: cbSuccess,\n\t\t});\n\t},\n\n\tGetModuleInstallLink(params, cbSuccess, cbFailure) {\n\t\tconst requestData = {\n\t\t\tTYPE: 'MODULEGETLINK',\n\t\t\tLICENSE: globalPBXLicense,\n\t\t\tRELEASEID: params.releaseId,\n\t\t};\n\t\t$.api({\n\t\t\turl: Config.updateUrl,\n\t\t\ton: 'now',\n\t\t\tmethod: 'POST',\n\t\t\tdata: requestData,\n\t\t\tsuccessTest(response) {\n\t\t\t\t// test whether a JSON response is valid\n\t\t\t\treturn response !== undefined\n\t\t\t\t\t&& Object.keys(response).length > 0\n\t\t\t\t\t&& response.result.toUpperCase() === 'SUCCESS';\n\t\t\t},\n\t\t\tonSuccess(response) {\n\t\t\t\tcbSuccess(params, response);\n\t\t\t},\n\t\t\tonFailure() {\n\t\t\t\tcbFailure(params);\n\t\t\t},\n\t\t});\n\t},\n\t/**\n\t * Проверка ответа на JSON\n\t * @param jsonString\n\t * @returns {boolean|any}\n\t */\n\ttryParseJSON(jsonString) {\n\t\ttry {\n\t\t\tconst o = JSON.parse(jsonString);\n\n\t\t\t// Handle non-exception-throwing cases:\n\t\t\t// Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n\t\t\t// but... JSON.parse(null) returns null, and typeof null === \"object\",\n\t\t\t// so we must check for that, too. Thankfully, null is falsey, so this suffices:\n\t\t\tif (o && typeof o === 'object') {\n\t\t\t\treturn o;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t//\n\t\t}\n\t\treturn false;\n\t},\n};"],"file":"update-api.js"}