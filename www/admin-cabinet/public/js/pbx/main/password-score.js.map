{
  "version": 3,
  "sources": [
    "../../src/main/password-score.js"
  ],
  "names": [
    "PasswordScore",
    "scorePassword",
    "pass",
    "score",
    "letters",
    "i",
    "length",
    "variations",
    "digits",
    "test",
    "lower",
    "upper",
    "nonWords",
    "variationCount",
    "check",
    "parseInt",
    "checkPassStrength",
    "param",
    "bar",
    "progress",
    "percent",
    "Math",
    "min",
    "showActivity",
    "section",
    "show"
  ],
  "mappings": ";;AAAA;;;;;;;AASA,IAAMA,aAAa,GAAG;AACrBC,EAAAA,aADqB;AAAA,2BACPC,IADO,EACD;AACnB,UAAIC,KAAK,GAAG,CAAZ;;AACA,UAAI,CAACD,IAAL,EAAW;AACV,eAAOC,KAAP;AACA,OAJkB,CAMnB;;;AACA,UAAMC,OAAO,GAAG,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrCD,QAAAA,OAAO,CAACF,IAAI,CAACG,CAAD,CAAL,CAAP,GAAmB,CAACD,OAAO,CAACF,IAAI,CAACG,CAAD,CAAL,CAAP,IAAoB,CAArB,IAA0B,CAA7C;AACAF,QAAAA,KAAK,IAAI,MAAMC,OAAO,CAACF,IAAI,CAACG,CAAD,CAAL,CAAtB;AACA,OAXkB,CAanB;;;AACA,UAAME,UAAU,GAAG;AAClBC,QAAAA,MAAM,EAAE,KAAKC,IAAL,CAAUP,IAAV,CADU;AAElBQ,QAAAA,KAAK,EAAE,QAAQD,IAAR,CAAaP,IAAb,CAFW;AAGlBS,QAAAA,KAAK,EAAE,QAAQF,IAAR,CAAaP,IAAb,CAHW;AAIlBU,QAAAA,QAAQ,EAAE,KAAKH,IAAL,CAAUP,IAAV;AAJQ,OAAnB;AAOA,UAAIW,cAAc,GAAG,CAArB;;AACA,WAAK,IAAMC,KAAX,IAAoBP,UAApB,EAAgC;AAC/BM,QAAAA,cAAc,IAAKN,UAAU,CAACO,KAAD,CAAV,KAAsB,IAAvB,GAA+B,CAA/B,GAAmC,CAArD;AACA;;AACDX,MAAAA,KAAK,IAAI,CAACU,cAAc,GAAG,CAAlB,IAAuB,EAAhC;AAEA,aAAOE,QAAQ,CAACZ,KAAD,EAAQ,EAAR,CAAf;AACA;;AA7BoB;AAAA;AA8BrBa,EAAAA,iBA9BqB;AAAA,+BA8BHC,KA9BG,EA8BI;AACxB,UAAMd,KAAK,GAAGH,aAAa,CAACC,aAAd,CAA4BgB,KAAK,CAACf,IAAlC,CAAd;AACAe,MAAAA,KAAK,CAACC,GAAN,CAAUC,QAAV,CAAmB;AAClBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,CAASnB,KAAT,EAAgB,GAAhB,CADS;AAElBoB,QAAAA,YAAY,EAAE;AAFI,OAAnB;AAIAN,MAAAA,KAAK,CAACO,OAAN,CAAcC,IAAd,GANwB,CAOxB;AACA;AACA;;AACA,aAAO,EAAP;AACA;;AAzCoB;AAAA;AAAA,CAAtB,C,CA6CA",
  "sourcesContent": [
    "/*\n * Copyright (C) MIKO LLC - All Rights Reserved\n * Unauthorized copying of this file, via any medium is strictly prohibited\n * Proprietary and confidential\n * Written by Nikolay Beketov, 6 2018\n *\n */\n\n\nconst PasswordScore = {\n\tscorePassword(pass) {\n\t\tlet score = 0;\n\t\tif (!pass) {\n\t\t\treturn score;\n\t\t}\n\n\t\t// award every unique letter until 5 repetitions\n\t\tconst letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\n\t\t// bonus points for mixing it up\n\t\tconst variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (const check in variations) {\n\t\t\tvariationCount += (variations[check] === true) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\n\t\treturn parseInt(score, 10);\n\t},\n\tcheckPassStrength(param) {\n\t\tconst score = PasswordScore.scorePassword(param.pass);\n\t\tparam.bar.progress({\n\t\t\tpercent: Math.min(score, 100),\n\t\t\tshowActivity: false,\n\t\t});\n\t\tparam.section.show();\n\t\t// if (score > 80) { return 'strong'; }\n\t\t// if (score > 60) { return 'good'; }\n\t\t// if (score >= 30) { return 'weak'; }\n\t\treturn '';\n\t},\n\n};\n\n// export default PasswordScore;\n"
  ],
  "file": "password-score.js"
}