<?php
/**
 * Copyright © MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Alexey Portnov, 2 2020
 */

require_once 'globals.php';
$fp = fopen('php://stdin', 'rb');
$storage = new Storage();

if(Storage::is_storage_disk_mounted()){
	echo "\n ".Util::translate('Storage disk is already mounted...')." \n\n";
	sleep(2);
    return 0;
}

$valid_disks = [];
$all_hdd = $storage->get_all_hdd();
$system_disk   = '';

$selected_disk = ['size' => 0, 'id' => ''];
foreach ($all_hdd as $disk) {
    $additional = '';
	if($disk['mounted'] && $disk['sys_disk'] && file_exists("/dev/{$disk['id']}4")){
        $system_disk = $disk['id'];
	    $additional.= "\033[31;1m [SYSTEM]\033[0m";
	}elseif ($disk['sys_disk'] && file_exists('/offload/livecd')){
        $system_disk = $disk['id'];
        $additional.= "\033[31;1m [SYSTEM]\033[0m";
	}elseif ($disk['mounted']){
	    continue;
    }

    if($selected_disk['size'] === 0 || $disk['size'] > $selected_disk['size'] ){
        $selected_disk = $disk;
    }

    $part = $disk['sys_disk']?'4':'1';
	if(Storage::is_storage_disk("/dev/{$disk['id']}{$part}")){
        $additional.= "\033[33;1m [STORAGE] \033[0m";
    }

    if($disk['sys_disk']){
        $part4_found = false;
        foreach ($disk['partitions'] as $partition){
            if($partition['dev'] === "{$disk['id']}4" && $partition['size'] > 1000){
                $part4_found = true;
            }
        }
        if($part4_found === false){
            continue;
        }
    }elseif($disk['size'] < 1024){
        continue;
    }
    $valid_disks[$disk['id']] = "  - {$disk['id']}, {$disk['size_text']}, {$disk['vendor']}{$additional}\n";
}

if(count($valid_disks) === 0) {
    echo "\n " . Util::translate('Valid disks not found...') . " \n";
    sleep(3);
    return 0;
}

echo "\n ".Util::translate('Select the drive to store the data.');
echo "\n ".Util::translate('Selected disk:')."\033[33;1m [{$selected_disk['id']}] \033[0m \n\n";
echo "\n ".Util::translate('Valid disks are:')." \n\n";
foreach ($valid_disks as $disk) {
    echo $disk;
}
echo "\n";

do {
	echo "\n".Util::translate('Enter the device name:').Util::translate('(default value = ').$selected_disk['id'].') :';
	$target_disk_storage = trim(fgets($fp));
	if ($target_disk_storage === '') {
        $target_disk_storage = $selected_disk['id'];
	}
} while (!array_key_exists($target_disk_storage, $valid_disks));

if(!empty($system_disk) && $system_disk === $target_disk_storage){
    // Выбран системный диск.
    $dev_disk  = "/dev/{$target_disk_storage}";
    $part_disk = "{$dev_disk}4";
}else{
    $dev_disk = "/dev/$target_disk_storage";
    if(!Storage::is_storage_disk("{$dev_disk}1")){
        $storage->format_disk_local($dev_disk);
    }
    $part_disk = "{$dev_disk}1";
}
$data=[
    'device' => $dev_disk,
    'uniqid' => $storage->get_uuid($part_disk),
    'name'   => 'Storage №1'
];
$storage->save_disk_settings($data);
if(file_exists('/offload/livecd')) {
    // Запуск АТС не требуется, это установка станции в режиме LiveCD.
    return true;
}
init_db($GLOBALS['g']['m_di'], $GLOBALS['g']['phalcon_settings']);
$dirs = PBX::get_asterisk_dirs();
$old_modules_dir = $dirs['custom_modules'];

$storage->configure();

$GLOBALS['g']['phalcon_settings'] = include 'phalcon_settings.php';
init_loader($GLOBALS['g'], $GLOBALS['g']['phalcon_settings']);
init_db($GLOBALS['g']['m_di'], $GLOBALS['g']['phalcon_settings']);

Cdr::create_db();
Cdr::check_db();

$system = new System();
$system->syslogd_start();

$pbx = new PBX();
$pbx->configure();

$dirs = PBX::get_asterisk_dirs();
$new_modules_dir = $dirs['custom_modules'];
if($old_modules_dir !== $new_modules_dir){
    Util::mwexec("cp -R {$old_modules_dir}/* '{$new_modules_dir}/'");
    Util::mwexec("chown -R www:www '{$new_modules_dir}/'");
    Util::mwexec("rm -rf '{$old_modules_dir}/'");
}

// Перезапускае связанные со storage процессы.
Util::restart_worker('worker_api_commands');
Util::restart_worker('worker_ami_listener');


if(Storage::is_storage_disk_mounted()){
    echo "\n ".Util::translate('Storage disk is already mounted...')." \n\n";
}else{
    echo "\n ".Util::translate('Failed to mount the disc...')." \n\n";
}
sleep(3);
